name: Deploy argocd to AKS cluster

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - secrets

jobs:
  verify-secrets:
    runs-on: ubuntu-latest
    environment: aks

    steps:
      - name: Check AZURE_CLIENT_ID variable
        run: |
          if [[ -z "${AZURE_CLIENT_ID}" ]]; then
            echo "AZURE_CLIENT_ID secret is not set" >&2
            exit 1
          else
            echo "AZURE_CLIENT_ID secret is set"
          fi
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}


      - name: Check AZURE_CLIENT_SECRET variable
        run: |
          if [[ -z "${AZURE_CLIENT_SECRET}" ]]; then
            echo "AZURE_CLIENT_ID secret is not set" >&2
            exit 1
          else
            echo "AZURE_CLIENT_SECRET secret is set"
          fi
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Check AZURE_SUBSCRIPTION_ID variable
        run: |
          if [[ -z "${AZURE_SUBSCRIPTION_ID}" ]]; then
            echo "AZURE_SUBSCRIPTION_ID secret is not set" >&2
            exit 1
          else
            echo "AZURE_SUBSCRIPTION_ID secret is set"
          fi
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check AZURE_TENANT_ID variable
        run: |
          if [[ -z "${AZURE_TENANT_ID}" ]]; then
            echo "AZURE_TENANT_ID secret is not set" >&2
            exit 1
          else
            echo "AZURE_TENANT_ID secret is set"
          fi
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Check KUBE_CONFIG variable
        run: |
          if [[ -z "${KUBE_CONFIG}" ]]; then
            echo "KUBE_CONFIG secret is not set" >&2
            exit 1
          else
            echo "KUBE_CONFIG secret is set"
          fi
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
